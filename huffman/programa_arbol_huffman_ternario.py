# -*- coding: utf-8 -*-
"""programa_arbol_huffman_ternario.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q19DCXcL-0_tgpdrBzPsWl01Qi77B030
"""

from heapq import heappush, heappop
from collections import Counter

class NodoHuffmanTernario:
    def __init__(self, caracter=None, frecuencia=0):
        self.caracter = caracter
        self.frecuencia = frecuencia
        self.hijos = []  # Hasta tres hijos

    def __lt__(self, other):
        return self.frecuencia < other.frecuencia

def construir_arbol_huffman_ternario(frecuencias):
    heap = []
    for caracter, frecuencia in frecuencias.items():
        heappush(heap, NodoHuffmanTernario(caracter, frecuencia))

    while len(heap) > 1:
        combinados = [heappop(heap) for _ in range(min(3, len(heap)))]
        nueva_frecuencia = sum(nodo.frecuencia for nodo in combinados)

        nuevo_nodo = NodoHuffmanTernario(frecuencia=nueva_frecuencia)
        nuevo_nodo.hijos = combinados

        heappush(heap, nuevo_nodo)

    return heappop(heap)

def generar_codificacion_huffman_ternario(nodo, prefijo="", codigos={}):
    if nodo is None:
        return

    if nodo.caracter is not None:  # Nodo hoja
        codigos[nodo.caracter] = prefijo

    for indice, hijo in enumerate(nodo.hijos):
        generar_codificacion_huffman_ternario(hijo, prefijo + str(indice), codigos)

    return codigos

def calcular_frecuencias(texto):
    total_caracteres = len(texto)
    frecuencia_total = Counter(texto)
    frecuencia_relativa = {caracter: freq / total_caracteres for caracter, freq in frecuencia_total.items()}
    return frecuencia_total, frecuencia_relativa

def preprocesar_texto(texto):
    return texto.lower().replace(" ", "").replace("\n", "")

def main():
    print("Programa para construir un árbol de Huffman ternario y generar su tabla de codificación.")
    texto = input("Introduce el texto: ")

    # Preprocesar el texto
    texto_procesado = preprocesar_texto(texto)
    print("\nTexto procesado:")
    print(texto_procesado)

    # Calcular frecuencias
    frecuencia_total, frecuencia_relativa = calcular_frecuencias(texto_procesado)
    print("\nFrecuencias de los caracteres:")
    for caracter, freq in frecuencia_total.items():
        print(f"Carácter '{caracter}': Total = {freq}, Relativa = {frecuencia_relativa[caracter]:.4f}")

    # Construir el árbol de Huffman ternario
    arbol_huffman_ternario = construir_arbol_huffman_ternario(frecuencia_total)

    # Generar la tabla de codificación ternaria
    codificacion_huffman_ternario = generar_codificacion_huffman_ternario(arbol_huffman_ternario)
    print("\nTabla de codificación ternaria (Huffman):")
    for caracter, codigo in codificacion_huffman_ternario.items():
        print(f"Carácter '{caracter}': Código ternario = {codigo}")

if __name__ == "__main__":
    main()